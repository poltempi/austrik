---
import BaseLayout from "../layouts/BaseLayout.astro";
import { fetchAllPosts, fetchCategories } from "../services/posts";

Astro.response.headers.set('Cache-Control', 'no-store, max-age=0');

let posts = [] as Awaited<ReturnType<typeof fetchAllPosts>>;
let categories = [] as Awaited<ReturnType<typeof fetchCategories>>;
try {
  posts = await fetchAllPosts();
  categories = await fetchCategories();
} catch (e) {
  console.error('Home fetchAllPosts error:', e);
  posts = [];
}
---

<BaseLayout title="Austrik Blog" description="Noticias y artículos de Austrik" categories={categories}>
  <!-- Title will be shown after hero on home -->
  {posts.length === 0 && (
    <p>No hay posts todavía o hay un problema temporal con la conexión a datos.</p>
  )}

  {posts.length > 0 && (
    <section class="tc-hero">
      {(() => {
        const hero = posts.slice(0, 4);
        const main = hero[0];
        const sideLarge = hero[1];
        const smallA = hero[2];
        const catMap = new Map(categories.map((c) => [c.id, c.name]));
        return (
          <div class="tc-hero-grid">
            <div class="tc-hero-left">
              {main && (
                <a class="hero-main" href={`/${main.slug}`}>
                  <figure>
                    <img src={main.cover_image_url ?? '/demo-cover.svg'} alt={main.title} loading="eager" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                    <figcaption>
                    <span class="badge">{(main as any).category_name || catMap.get((main as any).category_id || '') || 'GENERAL'}</span>
                      <h2>{main.title}</h2>
                      {main.published_at && (
                        <small class="meta">{new Date(main.published_at).toLocaleDateString('es')}</small>
                      )}
                    </figcaption>
                  </figure>
                </a>
              )}
              <div class="tc-right-col">
                {sideLarge && (
                  <a class="hero-side-large" href={`/${sideLarge.slug}`}>
                  <figure>
                    <img src={sideLarge.cover_image_url ?? '/demo-cover.svg'} alt={sideLarge.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                    <figcaption>
                    <span class="badge">{(sideLarge as any).category_name || catMap.get((sideLarge as any).category_id || '') || 'GENERAL'}</span>
                      <h3>{sideLarge.title}</h3>
                        {sideLarge.published_at && (
                          <small class="meta">{new Date(sideLarge.published_at).toLocaleDateString('es')}</small>
                        )}
                      </figcaption>
                    </figure>
                  </a>
                )}
                {smallA && (
                  <div class="hero-side-small">
                    <a class="hero-small" href={`/${smallA.slug}`}>
                      <figure>
                        <img src={smallA.cover_image_url ?? '/demo-cover.svg'} alt={smallA.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                        <figcaption>
                          <span class="badge">{(smallA as any).category_name || catMap.get((smallA as any).category_id || '') || 'GENERAL'}</span>
                          <h4>{smallA.title}</h4>
                          {smallA.published_at && (
                            <small class="meta">{new Date(smallA.published_at).toLocaleDateString('es')}</small>
                          )}
                        </figcaption>
                      </figure>
                    </a>
                  </div>
                )}
              </div>
            </div>
            <aside class="tc-hero-right">
              <div class="top-list">
                <h3>Top Headlines</h3>
                <ul>
                  {posts.slice(0, 6).map((p) => (
                    <li>
                      <a href={`/${p.slug}`}>{p.title}</a>
                    </li>
                  ))}
                </ul>
              </div>
              <div class="ad-slot" id="ad-right-top"><!-- Adsense slot (optional) --></div>
            </aside>
          </div>
        );
      })()}
    </section>
  )}

  <div class="blog-title small">
    <h1>Health and mindset blog</h1>
  </div>

  {posts.length > 4 && (
    <section class="posts-grid" aria-label="Más artículos">
      {(() => {
        const rest = posts.slice(4, 7);
        const catMap = new Map(categories.map((c) => [c.id, c.name]));
        return (
          <div class="post-grid">
            {rest.map((p) => (
              <a class="post-card" href={`/${p.slug}`}>
                <figure>
                  <img src={p.cover_image_url ?? '/demo-cover.svg'} alt={p.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                  <div class="caption">
                    <span class="badge">{(p as any).category_name || catMap.get((p as any).category_id || '') || 'General'}</span>
                    <h4 class="title">{p.title}</h4>
                    {p.published_at && (
                      <small class="meta">{new Date(p.published_at).toLocaleDateString('es')}</small>
                    )}
                  </div>
                </figure>
              </a>
            ))}
          </div>
        );
      })()}
    </section>
  )}

  <style>
    .blog-title { margin: 1rem 0 1.5rem 0; }
    .blog-title.small { margin: .75rem 0 1rem 0; }
    .blog-title h1 { margin: 0; font-size: 1.25rem; font-weight: 700; }

    .tc-hero-grid { display:grid; grid-template-columns: 2fr 1fr; gap:1rem; }
    .tc-hero-left { display:grid; grid-template-columns: 2fr 1fr; grid-template-rows: auto auto; gap:1rem; }
    .tc-hero-left .hero-main { grid-column: 1 / 2; grid-row: 1 / 3; }
    .tc-right-col { grid-column: 2 / 3; grid-row: 1 / 3; display:grid; grid-template-rows: auto auto; gap:1rem; }
    .tc-hero-right { border-left: 1px solid #e5e7eb; padding-left: 1rem; display:flex; flex-direction:column; min-height:0; }
    .tc-hero-right .top-list { flex: 1 1 auto; overflow:auto; min-height:0; }
    .tc-hero-right .ad-slot { flex: 0 0 auto; min-height:0; }
    .tc-hero-right h3 { margin: 0 0 .5rem 0; }
    .tc-hero-right ul { list-style: none; padding: 0; margin: 0; display:grid; gap:.5rem; }
    .tc-hero-right li { border-bottom:1px solid #e5e7eb; padding:.5rem 0; }
    .tc-hero-right a { text-decoration:none; color:#111827; }

    .hero-main figure, .hero-side-large figure, .hero-small figure { position: relative; width: 100%; margin: 0; overflow: hidden; border-radius: 0; }
    /* Heights to match reference layout */
    .hero-main figure { height: 460px; }
    .hero-side-large figure, .hero-small figure { height: 220px; }
    .hero-main img, .hero-side-large img, .hero-small img { width: 100%; height: 100%; object-fit: cover; display: block; }
    .hero-main figcaption, .hero-side-large figcaption, .hero-small figcaption { position: absolute; inset: auto 0 0 0; padding: 1rem; color: #fff; background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,.7) 70%); }
    .badge { margin-bottom:0; padding: .25rem .6rem; background: rgb(232 231 231 / 36%); color:#fff; border:none; }
    .hero-main h2 { margin: 1rem 0 .25rem 0; font-size: 1.75rem; line-height: 1.2; }
    .hero-side-large h3 { margin: 1rem 0 .25rem 0; font-size: 1.2rem; line-height: 1.25; }
    .hero-small h4 { margin: 1rem 0 .25rem 0; font-size: 1rem; line-height: 1.25; }
    .meta { color:#d1d5db; font-size:.85rem; }

    @media (max-width: 900px) {
      /* Force hero to single column */
      .tc-hero-grid { display: block; }
      .tc-hero-left { display: block; }
      .hero-main, .hero-side-large, .hero-small { display: block; margin-bottom: 1rem; }
      .hero-side-small { display: block; }
      .tc-right-col { display: block; }
      .tc-hero-right { border-left: none; border-top: 1px solid #e5e7eb; padding-left: 0; padding-top: 1rem; margin-top: 1rem; }
      /* Make all grids 1-col */
      .grid3 { grid-template-columns: 1fr; }
      /* Adjust heights for mobile */
      .hero-main figure, .hero-side-large figure, .hero-small figure { height: 250px; }
      main { padding: 0.5rem; }
    }

    /* Grid of posts (3 columns) */
    .posts-grid { margin-top: .5rem; }
    .post-grid { display:grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; }
    .post-card { text-decoration: none; color: inherit; }
    .post-card figure { margin: 0; border: none; border-radius: 0; overflow: hidden; position: relative; }
    .post-card img { width: 100%; height: 220px; object-fit: cover; display: block; }
    .post-card .caption { position: absolute; left: 0; right: 0; bottom: 0; padding: 1.5rem; color: #fff; background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.8) 100%); }
    .post-card .title { margin: 1rem 0 .5rem 0; font-size: 1.1rem; font-weight: 600; line-height: 1.3; }
    .post-card .meta { color: #d1d5db; font-size: 0.85rem; }


    @media (max-width: 900px) {
      .slide { grid-template-columns: 1fr; }
      .post-grid { grid-template-columns: 1fr; }
      .post-card img { height: 250px; }
    }
  </style>

  <script type="module">
    // Make headlines list flex with ad-slot height changes (when an ad loads)
    const ad = document.getElementById('ad-right-top');
    if (ad && 'ResizeObserver' in window) {
      const ro = new ResizeObserver(() => {
        // nothing needed, flexbox will adjust; this is a nudge for some browsers
        ad.style.minHeight = ad.offsetHeight + 'px';
        requestAnimationFrame(() => { ad.style.minHeight = '' });
      });
      ro.observe(ad);
    }
  </script>
</BaseLayout>
