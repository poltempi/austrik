---
import BaseLayout from "../layouts/BaseLayout.astro";
import { fetchAllPosts } from "../services/posts";

Astro.response.headers.set('Cache-Control', 'no-store, max-age=0');

let posts = [] as Awaited<ReturnType<typeof fetchAllPosts>>;
try {
  posts = await fetchAllPosts();
} catch (e) {
  console.error('Home fetchAllPosts error:', e);
  posts = [];
}
---

<BaseLayout title="Austrik Blog" description="Noticias y artículos de Austrik">
  <h1 style="margin-top:0">Austrik Blog</h1>
  {posts.length === 0 && (
    <p>No hay posts todavía o hay un problema temporal con la conexión a datos.</p>
  )}

  {posts.length > 0 && (
    <section class="hero-grid">
      {(() => {
        const hero = posts.slice(0, 4);
        const main = hero[0];
        const sideLarge = hero[1];
        const smallA = hero[2];
        const smallB = hero[3];
        return (
          <>
            {main && (
              <a class="hero-main" href={`/posts/${main.slug}/`}>
                <figure>
                  <img src={main.cover_image_url ?? '/demo-cover.svg'} alt={main.title} loading="eager" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                  <figcaption>
                    <h2>{main.title}</h2>
                    {main.excerpt && <p>{main.excerpt}</p>}
                  </figcaption>
                </figure>
              </a>
            )}
            {sideLarge && (
              <a class="hero-side-large" href={`/posts/${sideLarge.slug}/`}>
                <figure>
                  <img src={sideLarge.cover_image_url ?? '/demo-cover.svg'} alt={sideLarge.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                  <figcaption>
                    <h3>{sideLarge.title}</h3>
                    {sideLarge.excerpt && <p>{sideLarge.excerpt}</p>}
                  </figcaption>
                </figure>
              </a>
            )}
            {(smallA || smallB) && (
              <div class="hero-side-small">
                {smallA && (
                  <a class="hero-small" href={`/posts/${smallA.slug}/`}>
                    <figure>
                      <img src={smallA.cover_image_url ?? '/demo-cover.svg'} alt={smallA.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                      <figcaption>
                        <h4>{smallA.title}</h4>
                      </figcaption>
                    </figure>
                  </a>
                )}
                {smallB && (
                  <a class="hero-small" href={`/posts/${smallB.slug}/`}>
                    <figure>
                      <img src={smallB.cover_image_url ?? '/demo-cover.svg'} alt={smallB.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                      <figcaption>
                        <h4>{smallB.title}</h4>
                      </figcaption>
                    </figure>
                  </a>
                )}
              </div>
            )}
          </>
        );
      })()}
    </section>
  )}

  {posts.length > 4 && (
    <section class="carousel" aria-label="Últimos artículos">
      {(() => {
        const rest = posts.slice(4, 13);
        const slides = [] as typeof rest[];
        for (let i = 0; i < rest.length; i += 3) {
          slides.push(rest.slice(i, i + 3));
        }
        return (
          <div class="carousel-inner" data-slides={String(slides.length)}>
            <button class="nav prev" aria-label="Anterior" data-dir="-1">‹</button>
            <div class="viewport">
              <div class="track">
                {slides.map((group, idx) => (
                  <div class="slide" data-index={String(idx)}>
                    {group.map((p) => (
                      <a class="card" href={`/posts/${p.slug}/`}>
                        <figure>
                          <img src={p.cover_image_url ?? '/demo-cover.svg'} alt={p.title} loading="lazy" onerror="this.onerror=null;this.src='/demo-cover.svg'" />
                          <figcaption>
                            <h4>{p.title}</h4>
                            {p.excerpt && <p>{p.excerpt}</p>}
                          </figcaption>
                        </figure>
                      </a>
                    ))}
                  </div>
                ))}
              </div>
            </div>
            <button class="nav next" aria-label="Siguiente" data-dir="1">›</button>
          </div>
        );
      })()}
    </section>
  )}

  <style>
    .hero-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      grid-template-rows: auto auto;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    .hero-main { grid-column: 1 / 2; grid-row: 1 / 3; }
    .hero-side-large { grid-column: 2 / 3; grid-row: 1 / 2; }
    .hero-side-small { grid-column: 2 / 3; grid-row: 2 / 3; display: grid; grid-template-rows: 1fr 1fr; gap: 1rem; }

    .hero-main figure, .hero-side-large figure, .hero-small figure { position: relative; width: 100%; height: 100%; margin: 0; overflow: hidden; border-radius: 12px; }
    .hero-main img, .hero-side-large img, .hero-small img { width: 100%; height: 100%; object-fit: cover; display: block; }
    .hero-main figcaption, .hero-side-large figcaption, .hero-small figcaption { position: absolute; inset: auto 0 0 0; padding: 1rem; color: #fff; background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,.6) 60%); }
    .hero-main h2 { margin: 0 0 .25rem 0; font-size: 1.75rem; line-height: 1.2; }
    .hero-side-large h3 { margin: 0; font-size: 1.2rem; line-height: 1.25; }
    .hero-small h4 { margin: 0; font-size: 1rem; line-height: 1.25; }

    @media (max-width: 900px) {
      .hero-grid { grid-template-columns: 1fr; grid-template-rows: auto; }
      .hero-main { grid-column: auto; grid-row: auto; }
      .hero-side-large { grid-column: auto; grid-row: auto; }
      .hero-side-small { grid-column: auto; grid-row: auto; grid-template-columns: 1fr 1fr; grid-template-rows: none; }
    }

    .carousel { position: relative; }
    .carousel-inner { display: grid; grid-template-columns: auto 1fr auto; align-items: center; gap: .5rem; }
    .viewport { overflow: hidden; }
    .track { display: flex; transition: transform .4s ease; }
    .slide { min-width: 100%; display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; padding: .25rem 0; }
    .card figure { margin: 0; border: 1px solid #e5e7eb; border-radius: 10px; overflow: hidden; }
    .card img { width: 100%; height: 180px; object-fit: cover; display: block; }
    .card figcaption { padding: .75rem; }
    .card h4 { margin: 0 0 .25rem 0; font-size: 1rem; }
    .card p { margin: 0; color: #4b5563; font-size: .9rem; }
    .nav { appearance: none; border: 1px solid #e5e7eb; background: #fff; color: #111827; border-radius: 999px; width: 36px; height: 36px; cursor: pointer; }
    .nav:hover { background: #f3f4f6; }

    @media (max-width: 900px) {
      .slide { grid-template-columns: 1fr; }
    }
  </style>

  <script type="module">
    const root = document.currentScript?.previousElementSibling?.previousElementSibling;
    const carousel = document.querySelector('.carousel .carousel-inner');
    if (carousel) {
      let index = 0;
      const slides = Number(carousel.getAttribute('data-slides') || '0');
      const track = carousel.querySelector('.track');
      const update = () => { if (track) track.style.transform = `translateX(${-index * 100}%)`; };
      carousel.addEventListener('click', (e) => {
        const btn = (e.target as HTMLElement).closest('.nav') as HTMLButtonElement | null;
        if (!btn) return;
        const dir = Number(btn.dataset.dir || '0');
        index = Math.max(0, Math.min(slides - 1, index + dir));
        update();
      });
      update();
    }
  </script>
</BaseLayout>
